type Cliente {
    id: ID
    nombre: String
    apellido: String
    empresa: String
    emails: [Email]
    edad: Int
    tipo: TipoCliente
    pedidos: [Pedido]
}
type Pedido {
    producto: String
    precio: Int
}
type Email {
    email: String
}
type Producto {
    nombre: String
    precio: Int
    stock: Int
}
""" Asigna la categor√≠a del Cliente """
enum TipoCliente {
    BASICO
    PREMIUM
}
type Query {
    getClientes(limite: Int, offset: Int) : [Cliente]
    getCliente(id: ID): Cliente
    totalClientes: String
    # Productos
    obtenerProductos(limite: Int, offset: Int): [Producto]
    obtenerProducto(id: ID!): Producto
}
input PedidoInput {
    producto: String
    precio: Int
}
input EmailInput {
    email: String
}
""" Campos para los clientes nuevos """
input ClienteInput {
    id: ID
    nombre: String!
    apellido: String!
    empresa: String!
    emails: [EmailInput]
    edad: Int!
    tipo: TipoCliente!
    pedidos: [PedidoInput]
}
""" Campos para los productos nuevos """
input ProductoInput {
    id: ID
    nombre: String!
    precio: Int!
    stock: Int!
}

""" Mutations para crear nuevos Clientes """
type Mutation {
    # Nombre del resolver , Input con datos y el valor que retorna
    """ Te permite crear nuevos Clientes """
    crearCliente(input: ClienteInput) : Cliente
    actualizarCliente(input: ClienteInput) : Cliente
    eliminarCliente(id: ID!) : String
    # Productos
    nuevoProducto(input: ProductoInput) : Producto
}